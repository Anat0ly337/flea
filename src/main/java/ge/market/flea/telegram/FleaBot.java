package ge.market.flea.telegram;import static org.telegram.abilitybots.api.objects.Locality.USER;import static org.telegram.abilitybots.api.objects.Privacy.PUBLIC;import static org.telegram.abilitybots.api.util.AbilityUtils.getChatId;import java.util.List;import java.util.Map;import java.util.function.BiConsumer;import ge.market.flea.data.entity.Goods;import ge.market.flea.service.MobileService;import ge.market.flea.telegram.handlers.InitialResponseHandler;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Lazy;import org.springframework.core.env.Environment;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import org.telegram.abilitybots.api.bot.AbilityBot;import org.telegram.abilitybots.api.bot.BaseAbilityBot;import org.telegram.abilitybots.api.objects.Ability;import org.telegram.abilitybots.api.objects.Flag;import org.telegram.abilitybots.api.objects.Reply;import org.telegram.telegrambots.meta.api.objects.Update;import org.telegram.telegrambots.meta.exceptions.TelegramApiException;@Componentpublic class FleaBot extends AbilityBot {    private final InitialResponseHandler initialResponseHandler;    @Autowired    @Lazy    private MessageReceiver messageReceiver;    @Autowired    private MobileService mobileService;    public FleaBot(Environment environment) {        super(environment.getProperty("bot.token"), environment.getProperty("bot.name"));        Map<Long, UserState> chatStates = db.getMap("chatStates");        initialResponseHandler = new InitialResponseHandler(silent, chatStates);    }    public Ability startBot() {        return Ability                .builder()                .name("start")                .info("info")                .locality(USER)                .privacy(PUBLIC)                .action(ctx -> initialResponseHandler.replyToStart(ctx.chatId()))                .build();    }    public Reply replyToButtons() {        BiConsumer<BaseAbilityBot, Update> action = (abilityBot, upd) -> initialResponseHandler.replyToButtons(getChatId(upd), upd.getMessage());        return Reply.of(action, Flag.TEXT, upd -> initialResponseHandler.userIsActive(getChatId(upd)));    }    @Override    public long creatorId() {        return 1L;    }    @Override    public void onUpdatesReceived(List<Update> updates) {        messageReceiver.receiveMessage(updates);        super.onUpdatesReceived(updates);    }    /*@Scheduled(fixedDelay = 1000)    public void scheduleFixedDelayTask() throws TelegramApiException {        System.out.println(                "Fixed delay task - " + System.currentTimeMillis() / 1000);        Goods goods = new Goods(null, "Nokia N95", "Состояние говно", null, null);        mobileService.save(goods);    }*/}